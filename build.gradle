buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'kotlin-android'

ext {
    splitVersion = '3.5.0'
}

android {
    compileSdk 33
    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {

        minSdk 15
        targetSdk 31
        multiDexEnabled true

        consumerProguardFiles 'split-proguard-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }
    }

    configurations {
        javadocDeps
    }


    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDirs += 'src/test/kotlin'
            java.srcDirs += sharedTestDir
        }
        androidTest {
            java.srcDirs += sharedTestDir
        }
    }

    buildTypes {
        debug {
            buildConfigField("String", "SPLIT_VERSION_NAME", "\"${splitVersion}\"")
        }
        release {
            buildConfigField("String", "SPLIT_VERSION_NAME", "\"${splitVersion}\"")
        }
    }
    namespace 'io.split.android.android_client'
    lint {
        abortOnError false
        disable 'InvalidPackage'
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {

    def roomVersion = '2.4.3'
    def workVersion = '2.7.1'
    def lifecycleVersion = '2.5.1'
    def annotationVersion = '1.2.0'
    def gsonVersion = '2.10.1'
    def guavaVersion = '32.1.3-android'
    def snakeYamlVersion = '2.2'
    def jetBrainsAnnotationsVersion = '22.0.0'
    def okHttpVersion = '3.12.13'
    def playServicesVersion = '18.2.0'
    def multidexVersion = '2.0.1'

    def jUnitVersion = '4.13.2'
    def mockitoVersion = '4.8.0'
    def hamcrestVersion = '1.3'
    def apacheCommonsVersion = '3.12.0'
    def kotlinVer = '1.5.31'
    def mockWebServerVersion = '3.12.13'

    def testRulesVersion = '1.4.0'
    def jUnitExtVersion = '1.1.3'
    def testRunnerVersion = '1.5.1'
    def orchestratorVersion = '1.4.2'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"

    implementation "androidx.work:work-runtime:$workVersion"

    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"

    implementation "androidx.annotation:annotation:$annotationVersion"

    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    implementation "org.yaml:snakeyaml:$snakeYamlVersion"
    implementation "org.jetbrains:annotations:$jetBrainsAnnotationsVersion"
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.google.android.gms:play-services-base:$playServicesVersion"
    implementation "androidx.multidex:multidex:$multidexVersion"

    // Test
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "org.apache.commons:commons-lang3:$apacheCommonsVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVer"

    androidTestImplementation "androidx.test:rules:$testRulesVersion"
    androidTestImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestUtil "androidx.test:orchestrator:$orchestratorVersion"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.work:work-testing:$workVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVer"
}

def splitPOM = {
    name = 'Split Android SDK'
    packaging = 'aar'
    description = 'Official Split Android SDK'
    url = 'https://github.com/splitio/android-client'

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'sarrubia'
            name = 'Sebastian Arrubia'
            email = 'sebastian@split.io'
        }

        developer {
            id = 'fernando'
            name = 'Fernando Martin'
            email = 'fernando@split.io'
        }
    }

    scm {
        connection = 'scm:git:git@github.com:splitio/android-client.git'
        developerConnection = 'scm:git@github.com:splitio/android-client.git'
        url = 'https://github.com/splitio/android-client'
    }
}

def releaseRepo = {
    name = "ReleaseRepo"
    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    credentials {
        username = ossrhUsername
        password = ossrhPassword
    }
}

def devRepo = {
    name = "DevelopmentRepo"
    url = 'https://splitio.jfrog.io/artifactory/maven-all-virtual'
    credentials {
        username = System.getenv('ARTIFACTORY_USER')
        password = System.getenv('ARTIFACTORY_TOKEN')
    }
}

afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.startsWith("test")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifactId = 'android-client'
                groupId = 'io.split.client'
                version = splitVersion
                artifact sourcesJar
                artifact javadocJar

                pom splitPOM

                repositories {
                    maven releaseRepo
                    maven devRepo
                }
            }

            development(MavenPublication) {
                from components.release

                artifactId = 'android-client'
                groupId = 'io.split.client'
                version = splitVersion
                artifact sourcesJar
                artifact javadocJar

                pom splitPOM
            }
        }
    }

    task publishRelease(type: PublishToMavenRepository) {
        publication = publishing.publications.getByName("release")
        repository = publishing.repositories.ReleaseRepo
    }

    task publishDev(type: PublishToMavenRepository) {
        publication = publishing.publications.getByName("development")
        repository = publishing.repositories.DevelopmentRepo
    }

    signing {
        sign publishing.publications.getByName("release")
    }
}


task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
//    archiveClassifier = "sources"
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
}

task javadocJar(type: Jar, dependsOn: javadoc) {
//    archiveClassifier = 'javadoc'
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task printReleaseDependenciesToFile {
    doLast {
        def outputFile = new File("$projectDir/deps.txt")
        def processBuilder = new ProcessBuilder("./gradlew", ":android-client:dependencies", "--configuration", "releaseRuntimeClasspath", "-q")

        outputFile.parentFile.mkdirs()
        outputFile.text = '' // Clear the file before writing
        processBuilder.redirectOutput(outputFile)
        processBuilder.directory(project.rootDir)

        try {
            Process process = processBuilder.start()
            process.waitFor()

            def filteredLines = outputFile.readLines().findAll { !it.contains("BUILD SUCCESSFUL") }

            // Write the filtered content back to the file
            outputFile.withPrintWriter { writer ->
                filteredLines.each(writer.&println)
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

preBuild.dependsOn printReleaseDependenciesToFile
