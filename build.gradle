buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply from: 'spec.gradle'

jacoco {
    toolVersion = '0.8.8'
}

ext {
    splitVersion = '5.3.0'
    jacocoVersion = '0.8.8'
}

// Define exclusions for JaCoCo coverage
def coverageExclusions = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    'android/**/*.*'
]

android {
    compileSdk 33
    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {

        minSdk 19
        targetSdk 31
        multiDexEnabled true

        consumerProguardFiles 'split-proguard-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        // Enable coverage for instrumented tests by default
        testInstrumentationRunnerArguments coverage: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
            // Enable JaCoCo coverage for instrumented tests
            unitTests.all {
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
        }
    }

    configurations {
        javadocDeps
    }


    testOptions {
        unitTests.returnDefaultValues = true
        
        // Configure JaCoCo for all test tasks
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDirs += 'src/test/kotlin'
            java.srcDirs += sharedTestDir
        }
        androidTest {
            java.srcDirs += sharedTestDir
        }
    }

    buildTypes {
        debug {
            buildConfigField("String", "SPLIT_VERSION_NAME", "\"${splitVersion}\"")
            buildConfigField("String", "FLAGS_SPEC", "\"${flagsSpec}\"")
            
            enableAndroidTestCoverage = true
            enableUnitTestCoverage = true
        }
        release {
            buildConfigField("String", "SPLIT_VERSION_NAME", "\"${splitVersion}\"")
            buildConfigField("String", "FLAGS_SPEC", "\"${flagsSpec}\"")
        }
    }
    namespace 'io.split.android.android_client'
    lint {
        abortOnError false
        disable 'InvalidPackage'
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {

    def roomVersion = '2.4.3'
    def workVersion = '2.7.1'
    def lifecycleVersion = '2.5.1'
    def annotationVersion = '1.2.0'
    def gsonVersion = '2.10.1'
    def guavaVersion = '32.1.3-android'
    def snakeYamlVersion = '2.2'
    def playServicesVersion = '18.2.0'
    def multidexVersion = '2.0.1'

    def jUnitVersion = '4.13.2'
    def mockitoVersion = '4.8.0'
    def hamcrestVersion = '1.3'
    def apacheCommonsVersion = '3.12.0'
    def kotlinVer = '1.5.31'
    def mockWebServerVersion = '4.12.0'

    def testRulesVersion = '1.4.0'
    def jUnitExtVersion = '1.1.3'
    def testRunnerVersion = '1.5.1'
    def orchestratorVersion = '1.4.2'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"

    implementation "androidx.work:work-runtime:$workVersion"

    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"

    implementation "androidx.annotation:annotation:$annotationVersion"

    implementation "com.google.code.gson:gson:$gsonVersion"

    implementation "org.yaml:snakeyaml:$snakeYamlVersion"
    implementation "com.google.android.gms:play-services-base:$playServicesVersion"
    implementation "androidx.multidex:multidex:$multidexVersion"

    // Test
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "org.apache.commons:commons-lang3:$apacheCommonsVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    testImplementation "com.squareup.okhttp3:okhttp-tls:$mockWebServerVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVer"
    testImplementation "com.google.guava:guava:$guavaVersion"

    androidTestImplementation "androidx.test:rules:$testRulesVersion"
    androidTestImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestUtil "androidx.test:orchestrator:$orchestratorVersion"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    androidTestImplementation "com.squareup.okhttp3:okhttp-tls:$mockWebServerVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.work:work-testing:$workVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVer"
    androidTestImplementation "com.google.guava:guava:$guavaVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
}

def splitPOM = {
    name = 'Split Android SDK'
    packaging = 'aar'
    description = 'Official Split Android SDK'
    url = 'https://github.com/splitio/android-client'

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'sarrubia'
            name = 'Sebastian Arrubia'
            email = 'sebastian@split.io'
        }

        developer {
            id = 'fernando'
            name = 'Fernando Martin'
            email = 'fernando@split.io'
        }
    }

    scm {
        connection = 'scm:git:git@github.com:splitio/android-client.git'
        developerConnection = 'scm:git@github.com:splitio/android-client.git'
        url = 'https://github.com/splitio/android-client'
    }
}

def releaseRepo = {
    name = "ReleaseRepo"
    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    credentials {
        username = ossrhUsername
        password = ossrhPassword
    }
}

def devRepo = {
    name = "DevelopmentRepo"
    url = 'https://splitio.jfrog.io/artifactory/maven-all-virtual'
    credentials {
        username = System.getenv('ARTIFACTORY_USER')
        password = System.getenv('ARTIFACTORY_TOKEN')
    }
}

afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.startsWith("test")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifactId = 'android-client'
                groupId = 'io.split.client'
                version = splitVersion
                artifact sourcesJar
                artifact javadocJar

                pom splitPOM

                repositories {
                    maven releaseRepo
                    maven devRepo
                }
            }

            development(MavenPublication) {
                from components.release

                artifactId = 'android-client'
                groupId = 'io.split.client'
                version = splitVersion
                artifact sourcesJar
                artifact javadocJar

                pom splitPOM
            }
        }
    }

    task publishRelease(type: PublishToMavenRepository) {
        publication = publishing.publications.getByName("release")
        repository = publishing.repositories.ReleaseRepo
    }

    task publishDev(type: PublishToMavenRepository) {
        publication = publishing.publications.getByName("development")
        repository = publishing.repositories.DevelopmentRepo
    }

    signing {
        sign publishing.publications.getByName("release")
    }
}


task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
//    archiveClassifier = "sources"
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
}

task javadocJar(type: Jar, dependsOn: javadoc) {
//    archiveClassifier = 'javadoc'
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task printReleaseDependenciesToFile {
    doLast {
        def outputFile = new File("$projectDir/deps.txt")
        def processBuilder = new ProcessBuilder("./gradlew", ":android-client:dependencies", "--configuration", "releaseRuntimeClasspath", "-q")

        outputFile.parentFile.mkdirs()
        outputFile.text = '' // Clear the file before writing
        processBuilder.redirectOutput(outputFile)
        processBuilder.directory(project.rootDir)

        try {
            Process process = processBuilder.start()
            process.waitFor()

            def filteredLines = outputFile.readLines().findAll { !it.contains("BUILD SUCCESSFUL") }

            // Write the filtered content back to the file
            outputFile.withPrintWriter { writer ->
                filteredLines.each(writer.&println)
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

preBuild.dependsOn printReleaseDependenciesToFile

tasks.withType(Test) {
    systemProperties['junit.jupiter.execution.parallel.enabled'] = true
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100
    maxHeapSize = "1024m"
}

// JaCoCo configuration
jacoco {
    toolVersion = jacocoVersion
}

// Enable JaCoCo for the test task
tasks.withType(Test) {
    // Enable JaCoCo coverage
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
    finalizedBy jacocoTestReport
}

// Task to ensure JaCoCo XML report is created in the exact location SonarQube expects
task generateJacocoXmlReport {
    doLast {
        // Create the directory if it doesn't exist
        def reportDir = file("${buildDir}/reports/jacoco/jacocoTestReport")
        reportDir.mkdirs()
        
        // Check if we have a JaCoCo exec file
        def execFiles = fileTree(dir: "${buildDir}", includes: ['**/*.exec'])
        if (execFiles.isEmpty()) {
            // Create an empty report file if no exec files found
            def reportFile = new File(reportDir, "jacocoTestReport.xml")
            reportFile.text = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<report name=\"android-client\">\n</report>"
            println "Created empty JaCoCo report at ${reportFile.absolutePath}"
        } else {
            println "Found JaCoCo exec files: ${execFiles.files}"
            // If we have exec files but no report, we could use JaCoCo's ant task to generate one
            // This is a simplified version - in a real scenario you'd use the JaCoCo ant task
        }
        
        // Check if the report exists and log its content
        def reportFile = new File(reportDir, "jacocoTestReport.xml")
        if (reportFile.exists()) {
            println "\n==== JaCoCo Report Content ===="
            println "Report file size: ${reportFile.length()} bytes"
            
            if (reportFile.length() > 0) {
                def xmlContent = reportFile.text
                println "First 500 chars of report: ${xmlContent.take(500)}..."
                
                // Count packages, classes, and methods
                def packageCount = (xmlContent =~ /<package/).count
                def classCount = (xmlContent =~ /<class/).count
                def methodCount = (xmlContent =~ /<method/).count
                def lineCount = (xmlContent =~ /<line/).count
                
                println "Report contains:\n  - ${packageCount} packages\n  - ${classCount} classes\n  - ${methodCount} methods\n  - ${lineCount} lines"
                
                // Check for covered lines
                def coveredLineCount = (xmlContent =~ /ci="1"/).count
                println "  - ${coveredLineCount} covered lines"
                
                if (coveredLineCount == 0) {
                    println "WARNING: No covered lines found in the report!"
                }
            } else {
                println "Report file is empty!"
            }
            println "===========================\n"
        } else {
            println "Report file does not exist at ${reportFile.absolutePath}"
        }
    }
}

// Unit test coverage report task
tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    
    // Make sure to include all source directories
    sourceDirectories.from = files(['src/main/java'])
    
    // Include all class files except excluded ones
    classDirectories.from = files([debugTree])
    
    // Include execution data files
    executionData.from(fileTree(dir: "$buildDir", includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
    ]))
    
    // Ensure this task always runs and doesn't get skipped
    outputs.upToDateWhen { false }
    
    doFirst {
        // Log a warning if no execution data files exist
        def execFiles = executionData.files
        if (execFiles.isEmpty() || !execFiles.any { it.exists() }) {
            logger.warn("JaCoCo will not generate coverage report because no execution data files were found")
        } else {
            execFiles.each { file ->
                if (file.exists()) {
                    logger.lifecycle("Found JaCoCo execution data file: $file")
                }
            }
        }
    }
}

// Custom task for running filtered Android instrumented tests
tasks.register('connectedFilteredAndroidTest') {
    doLast {
        def testClass = project.hasProperty('testClass') ? project.getProperty('testClass') : 'tests.database.DatabaseInitializationTest'
        exec {
            commandLine android.getAdbExecutable().toString(), 'shell', 'am', 'instrument', '-w', '-e', 'class', testClass, 
                       '-e', 'coverage', 'true', "${android.defaultConfig.testInstrumentationRunner}/androidx.test.runner.AndroidJUnitRunner"
        }
        
        // Create directory for coverage files
        def coverageDir = new File("${buildDir}/outputs/code_coverage/debugAndroidTest/connected/")
        coverageDir.mkdirs()
        
        // Pull coverage file from device
        exec {
            commandLine android.getAdbExecutable().toString(), 'pull', '/sdcard/coverage.ec', 
                       "${buildDir}/outputs/code_coverage/debugAndroidTest/connected/"
            ignoreExitValue true
        }
    }
}

// Comprehensive JaCoCo coverage report task
tasks.register('jacocoCodeCoverageReport', JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage report for both unit and instrumented tests'
    
    // Depend on both unit and instrumented tests
    dependsOn 'testDebugUnitTest', 'connectedDebugAndroidTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    // Use the defined exclusions
    def debugTree = fileTree(dir: "${buildDir}/intermediates/runtime_library_classes_dir/debug", excludes: coverageExclusions)
    def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: coverageExclusions)
    
    sourceDirectories.from(files(['src/main/java', 'src/main/kotlin'].findAll { new File(it).exists() }))
    classDirectories.from(files([debugTree, kotlinTree]))
    
    // Include all execution data files
    executionData.from(fileTree(dir: "$buildDir", includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec',
        '**/*.exec',
        '**/*.ec'
    ]))
    
    // Ensure this task always runs and doesn't get skipped
    outputs.upToDateWhen { false }
    
    doFirst {
        // Log a warning if no execution data files exist
        def execFiles = executionData.files
        executionData = executionData.filter { it.exists() }
        if (execFiles.isEmpty() || !execFiles.any { it.exists() }) {
            logger.warn("JaCoCo will not generate coverage report because no execution data files were found")
        } else {
            execFiles.each { file ->
                if (file.exists()) {
                    logger.lifecycle("Found JaCoCo execution data file: $file")
                }
            }
        }
    }
}

// Keep the original tasks for backward compatibility
tasks.register('jacocoAndroidTestReport', JacocoReport) {
    dependsOn 'connectedDebugAndroidTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    def debugTree = fileTree(dir: "${buildDir}/intermediates/runtime_library_classes_dir/debug", excludes: coverageExclusions)
    
    sourceDirectories.from(files(['src/main/java']))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: "$buildDir", includes: [
        'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec',
        '**/*.exec',
        '**/*.ec'
    ]))
    
    // Ensure this task always runs and doesn't get skipped
    outputs.upToDateWhen { false }
    
    doFirst {
        // Log a warning if no execution data files exist
        def execFiles = executionData.files
        if (execFiles.isEmpty() || !execFiles.any { it.exists() }) {
            logger.warn("JaCoCo will not generate coverage report because no execution data files were found")
        } else {
            execFiles.each { file ->
                if (file.exists()) {
                    logger.lifecycle("Found JaCoCo execution data file: $file")
                }
            }
        }
    }
}

// Combined coverage report task
tasks.register('jacocoCombinedReport', JacocoReport) {
    dependsOn 'testDebugUnitTest', 'connectedDebugAndroidTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/runtime_library_classes_dir/debug", excludes: fileFilter)
    
    sourceDirectories.from(files(['src/main/java']))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: "$buildDir", includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec',
        '**/*.exec',
        '**/*.ec'
    ]))
    
    // Ensure this task always runs and doesn't get skipped
    outputs.upToDateWhen { false }
    
    doFirst {
        // Log a warning if no execution data files exist
        def execFiles = executionData.files
        if (execFiles.isEmpty() || !execFiles.any { it.exists() }) {
            logger.warn("JaCoCo will not generate coverage report because no execution data files were found")
        } else {
            execFiles.each { file ->
                if (file.exists()) {
                    logger.lifecycle("Found JaCoCo execution data file: $file")
                }
            }
        }
    }
}
