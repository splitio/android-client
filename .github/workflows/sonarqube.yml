name: SonarCloud Analysis

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build project and run tests with coverage
        run: |
          # Build the project
          ./gradlew assembleDebug --stacktrace
          
          # Run tests with coverage - allow test failures
          ./gradlew testDebugUnitTest jacocoTestReport --stacktrace || {
            echo "Some tests failed, but continuing to check for coverage data..."
            # Even if tests fail, JaCoCo should generate a report with partial coverage
            # from the tests that did pass
          }
          
          # Check if the report was generated with content
          if [ -f build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml ]; then
            REPORT_SIZE=$(stat -f%z build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml)
            if [ "$REPORT_SIZE" -lt 1000 ]; then
              echo "JaCoCo report is too small ($REPORT_SIZE bytes), likely empty. Trying to generate from test execution data..."
              # Try to generate the report directly from the exec file
              if [ -f build/jacoco/testDebugUnitTest.exec ]; then
                java -jar ~/.gradle/caches/modules-2/files-2.1/org.jacoco/org.jacoco.cli/0.8.8/*/org.jacoco.cli-0.8.8.jar report build/jacoco/testDebugUnitTest.exec \
                  --classfiles build/intermediates/runtime_library_classes_dir/debug \
                  --sourcefiles src/main/java \
                  --xml build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
                
                # Check if the report was successfully generated
                NEW_REPORT_SIZE=$(stat -f%z build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml)
                if [ "$NEW_REPORT_SIZE" -lt 1000 ]; then
                  echo "ERROR: Failed to generate a valid JaCoCo report with coverage data"
                  exit 1
                else
                  echo "JaCoCo report successfully generated with size $NEW_REPORT_SIZE bytes"
                fi
              else
                echo "ERROR: No JaCoCo execution data file found. Tests may not have run correctly."
                exit 1
              fi
            else
              echo "JaCoCo report generated successfully with size $REPORT_SIZE bytes"
            fi
          else
            echo "ERROR: JaCoCo report file not found. Coverage data is missing."
            exit 1
          fi
        
      - name: Debug - Check for JaCoCo report files and binary directories
        run: |
          echo "Checking for JaCoCo report files..."
          find build -name "*.xml" | grep jacoco || echo "No XML files found"
          find build -name "*.exec" | grep jacoco || echo "No exec files found"
          echo "Contents of JaCoCo report directory:"
          ls -la build/reports/jacoco/jacocoTestReport/ || echo "Directory not found"
          
          echo "\nChecking test execution results:"
          find build -name "TEST-*.xml" | xargs cat | grep -E 'tests|failures|errors|skipped' || echo "No test result files found"
          
          echo "\nChecking JaCoCo report content:"
          if [ -f build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml ]; then
            echo "Report file size: $(wc -c < build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml) bytes"
            echo "First 500 chars of report:"
            head -c 500 build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
            echo "\n\nCounting coverage elements:"
            grep -c "<package" build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml || echo "No packages found"
            grep -c "<class" build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml || echo "No classes found"
            grep -c "<method" build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml || echo "No methods found"
            grep -c "<line" build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml || echo "No lines found"
            grep -c 'ci="1"' build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml || echo "No covered lines found"
          else
            echo "JaCoCo report file not found"
          fi
          
          echo "\nChecking binary directories specified in sonar-project.properties:"
          echo "build/intermediates/runtime_library_classes_dir/debug:"
          ls -la build/intermediates/runtime_library_classes_dir/debug || echo "Directory not found"
          
          echo "\nChecking all available class directories:"
          find build -path "*/build/*" -name "*.class" | head -n 5 || echo "No class files found"

      # Commented out Android instrumented test part to focus on unit test flow
      # - name: AVD cache
      #   uses: actions/cache@v4
      #   id: avd-cache
      #   with:
      #     path: |
      #       ~/.android/avd/*
      #       ~/.android/adb*
      #     key: avd-28

      # - name: Create AVD and generate snapshot for caching
      #   if: steps.avd-cache.outputs.cache-hit != 'true'
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 28
      #     force-avd-creation: false
      #     emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: true
      #     script: echo "Generated AVD snapshot for caching."

      # - name: Assemble debug AndroidTest
      #   run: ./gradlew assembleDebugAndroidTest

      # - name: Run instrumented tests with coverage (continue on error)
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 28
      #     profile: Galaxy Nexus
      #     script: ./gradlew connectedDebugAndroidTest jacocoAndroidTestReport --continue
      #   continue-on-error: true

      # - name: Generate combined coverage report
      #   run: ./gradlew jacocoCombinedReport

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
